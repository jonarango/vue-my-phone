name: Update README Release URL

on:
  push:
    branches:
      - main
    paths:
      - 'build/**.tgz'
      - 'README.md'

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update README with latest release TGZ URL
        env:
          GITHUB_USER_REPO: ${{ github.repository }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          README_FILE="README.md"

          # Find the .tgz file in the build directory. Assumes only one relevant .tgz.
          # Handles cases where build/ might not exist or is empty.
          RELEASE_FILE_PATH=$(find build -maxdepth 1 -name '*-*.*.*.tgz' -print -quit 2>/dev/null || echo "")

          if [ -z "$RELEASE_FILE_PATH" ]; then
            echo "No release TGZ file (e.g., projectname-1.2.3.tgz) found in build/ directory."
            exit 0 # Nothing to do, exit gracefully.
          fi

          NEW_TGZ_FILENAME=$(basename "$RELEASE_FILE_PATH")
          echo "Found release file in build/: $NEW_TGZ_FILENAME"

          # Try to find the current install URL in README specific to this repository
          # Example URL: https://github.com/jonarango/vue-my-phone/raw/main/build/vue-my-phone-0.0.0.tgz
          CURRENT_INSTALL_URL=$(grep -m 1 -o "https://github.com/$GITHUB_USER_REPO/raw/main/build/[^[:space:]]*\.tgz" "$README_FILE" || echo "")

          # If not found with specific repo, try a more generic pattern
          if [ -z "$CURRENT_INSTALL_URL" ]; then
            echo "Specific repository URL not found, trying generic pattern..."
            CURRENT_INSTALL_URL=$(grep -m 1 -o 'https://github.com/[^/]\+/[^/]\+/raw/main/build/[^[:space:]]*\.tgz' "$README_FILE" || echo "")
          fi

          CURRENT_TGZ_FILENAME_IN_README=""
          if [ -n "$CURRENT_INSTALL_URL" ]; then
            CURRENT_TGZ_FILENAME_IN_README=$(basename "$CURRENT_INSTALL_URL")
            echo "Current TGZ filename extracted from README URL ('$CURRENT_INSTALL_URL'): '$CURRENT_TGZ_FILENAME_IN_README'"
          else
            echo "Could not find any existing install URL pattern in $README_FILE."
            # If you want the action to ADD the line if it doesn't exist, that logic would go here.
            # For now, it will only update an existing one. If no URL is found, it cannot update.
            # If NEW_TGZ_FILENAME is present, but no current URL, we might want to error or log significantly.
            # However, the next check handles "no update needed" correctly even if CURRENT_TGZ_FILENAME_IN_README is empty.
          fi
          
          # If filenames match, no update needed (or if current URL couldn't be found but we need it to update)
          if [ "$NEW_TGZ_FILENAME" == "$CURRENT_TGZ_FILENAME_IN_README" ]; then
            echo "README.md install URL is already up-to-date with $NEW_TGZ_FILENAME (or no existing URL to compare/update)."
            exit 0
          fi
          
          # If we reached here AND CURRENT_INSTALL_URL is empty, it means a new TGZ exists,
          # but there's no matching line in README to update.
          if [ -z "$CURRENT_INSTALL_URL" ]; then
              echo "Error: New TGZ file ($NEW_TGZ_FILENAME) found, but no existing URL line in $README_FILE to update."
              echo "Please ensure a line like 'npm install https://github.com/$GITHUB_USER_REPO/raw/main/build/PACKAGE-VERSION.tgz' exists."
              exit 1 # Critical error, as we can't perform the update.
          fi

          echo "Updating README.md: New TGZ is '$NEW_TGZ_FILENAME', old was '$CURRENT_TGZ_FILENAME_IN_README'."

          NEW_FULL_URL="https://github.com/$GITHUB_USER_REPO/raw/main/build/$NEW_TGZ_FILENAME"

          # Escape special characters in URLs for sed
          ESCAPED_OLD_URL=$(printf '%s' "$CURRENT_INSTALL_URL" | sed 's:[][\/.^$*]:\&:g')
          ESCAPED_NEW_URL=$(printf '%s' "$NEW_FULL_URL" | sed 's:[][\/.^$*]:\&:g')

          # Replace the old URL with the new URL in README.md
          sed -i "s/$ESCAPED_OLD_URL/$ESCAPED_NEW_URL/" "$README_FILE"
          echo "README.md has been updated locally with URL: $NEW_FULL_URL"

          # Configure git user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if README.md was actually changed before committing
          if git diff --quiet "$README_FILE"; then
            echo "No effective textual changes made to $README_FILE by sed."
            exit 0
          fi
          
          git add "$README_FILE"
          git commit -m "docs: Update download URL to $NEW_TGZ_FILENAME" -m "New URL: $NEW_FULL_URL"
          git push
          echo "Committed and pushed README.md changes." 